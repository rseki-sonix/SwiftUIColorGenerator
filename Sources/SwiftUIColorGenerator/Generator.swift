//
//  Generator.swift
//  
//
//  Created by rseki on 2021/08/02.
//

import ArgumentParser
import Foundation

struct Generator: ParsableCommand {
    struct Path: ExpressibleByArgument {
        let url: URL

        init(argument: String) {
            self.url = URL(fileURLWithPath: argument)
        }
    }

    static let xcassetsExtension = "xcassets"
    static let colorsetExtension = "colorset"

    @Flag(help: "Remove \"Color\" suffix. e.g. RedColor -> Red")
    var removeColorSuffix = false
    @Flag(help: "Generate UIColor code.")
    var generateUiColor = false
    @Argument(help: "Path to *.xcassets.")
    var xcassetPath: Path
    @Argument(help: "Path to ColorAssets.swift. (Overwrited)")
    var outputPath: Path

    func run() throws {
        do {
            let code = try generateCode(xcassets: xcassetPath.url)
            try code.write(to: outputPath.url, atomically: false, encoding: .utf8)
            print("Writing succeeded.")
        } catch {
            print("Error: \(error)")
        }
    }

    private func generateCode(xcassets: URL) throws -> String {
        do {
            guard xcassets.pathExtension == Generator.xcassetsExtension else {
                throw XCAssetsError.notXCAssets
            }
            let urls = try FileManager.default.contentsOfDirectory(
                at: xcassets,
                includingPropertiesForKeys: nil,
                options: .skipsSubdirectoryDescendants
            )
            var code = generateUiColor ? Generator.uiColorHeader : Generator.colorHeader
            urls.filter { $0.pathExtension == Generator.colorsetExtension }
                .sorted(by: { $0.lastPathComponent < $1.lastPathComponent })
                .forEach { url in
                    let name = url.lastPathComponent.replacingOccurrences(of: ".\(Generator.colorsetExtension)", with: "", options: .literal)
                    code += generateLine(name: name)
                }
            code += Generator.footer
            return code
        } catch {
            print(error)
            throw XCAssetsError.notDirectory
        }
    }

    private func generateLine(name: String) -> String {
        if generateUiColor {
            return "        static let \(covertName(name)) = UIColor(named: \"\(name)\")!\n"
        } else {
            return "        static let \(covertName(name)) = Color(\"\(name)\")\n"
        }
    }

    private func covertName(_ name: String) -> String {
        let splited = name.split(separator: "_").map { String($0).changeFirstCharacterCase(.upperCase) }
        var joined = splited.joined()
        if removeColorSuffix {
            joined = joined.replacingOccurrences(of: "Color$", with: "", options: .regularExpression)
        }
        return joined.changeFirstCharacterCase(.lowerCase)
    }
}

extension Generator {
    static let colorHeader = """
    // This file is auto generated. Please do NOT edit this file.

    import SwiftUI

    extension Color {
        enum Assets {

    """

    static let uiColorHeader = """
    // This file is auto generated. Please do NOT edit this file.

    import UIKit

    extension UIColor {
        enum Assets {

    """

    static let footer = """
        }
    }

    """

}
