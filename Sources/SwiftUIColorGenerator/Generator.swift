//
//  Generator.swift
//  
//
//  Created by rseki on 2021/08/02.
//

import ArgumentParser
import Foundation

struct Generator: ParsableCommand {
    struct Path: ExpressibleByArgument {
        let url: URL

        init(argument: String) {
            self.url = URL(fileURLWithPath: argument)
        }
    }

    static let xcassetsExtension = "xcassets"
    static let colorsetExtension = "colorset"

    @Argument(help: "Path to *.xcassets.")
    var xcassetPath: Path
    @Argument(help: "Path to ColorAssets.swift. (Overwrited)")
    var outputPath: Path

    func run() throws {
        do {
            let code = try generateCode(xcassets: xcassetPath.url)
            try code.write(to: outputPath.url, atomically: false, encoding: .utf8)
            print("Writing succeeded.")
        } catch {
            print("Error: \(error)")
        }
    }

    private func generateCode(xcassets: URL) throws -> String {
        do {
            guard xcassets.pathExtension == Generator.xcassetsExtension else {
                throw XCAssetsError.notXCAssets
            }
            let urls = try FileManager.default.contentsOfDirectory(
                at: xcassets,
                includingPropertiesForKeys: nil,
                options: .skipsSubdirectoryDescendants
            )
            var code = """
            // This file is auto generated. Please do NOT edit this file.

            import SwiftUI

            extension Color {
                enum Assets {

            """
            urls.filter { $0.pathExtension == Generator.colorsetExtension }
                .forEach { url in
                    let name = url.lastPathComponent.replacingOccurrences(of: ".\(Generator.colorsetExtension)", with: "", options: .literal)
                    code += "        static let \(name.firstLowerCased) = Color(\"\(name)\")\n"
                }
            code += """
                }
            }

            """
            return code
        } catch {
            print(error)
            throw XCAssetsError.notDirectory
        }
    }
}
